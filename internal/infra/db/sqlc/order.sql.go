// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order.sql

package sqlcdb

import (
	"context"
	"time"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO orders (id, user_id, amount_jpy, status, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateOrderParams struct {
	ID        string
	UserID    string
	AmountJpy int64
	Status    string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.ExecContext(ctx, createOrder,
		arg.ID,
		arg.UserID,
		arg.AmountJpy,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getOrderForUser = `-- name: GetOrderForUser :one
SELECT id, user_id, amount_jpy, status, created_at, updated_at
FROM orders
WHERE id = $1 AND user_id = $2
`

type GetOrderForUserParams struct {
	ID     string
	UserID string
}

func (q *Queries) GetOrderForUser(ctx context.Context, arg GetOrderForUserParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderForUser, arg.ID, arg.UserID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AmountJpy,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
SET amount_jpy = $2, status = $3, updated_at = $4
WHERE id = $1
`

type UpdateOrderParams struct {
	ID        string
	AmountJpy int64
	Status    string
	UpdatedAt time.Time
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateOrder,
		arg.ID,
		arg.AmountJpy,
		arg.Status,
		arg.UpdatedAt,
	)
	return err
}

const updateOrderStatusIfPendingForUser = `-- name: UpdateOrderStatusIfPendingForUser :execrows
UPDATE orders
SET status = $3, updated_at = $4
WHERE id = $1 AND user_id = $2 AND status = 'PENDING'
`

type UpdateOrderStatusIfPendingForUserParams struct {
	ID        string
	UserID    string
	Status    string
	UpdatedAt time.Time
}

func (q *Queries) UpdateOrderStatusIfPendingForUser(ctx context.Context, arg UpdateOrderStatusIfPendingForUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateOrderStatusIfPendingForUser,
		arg.ID,
		arg.UserID,
		arg.Status,
		arg.UpdatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
