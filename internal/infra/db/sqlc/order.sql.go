// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order.sql

package sqlcdb

import (
	"context"
	"time"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO orders (id, amount_jpy, status, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateOrderParams struct {
	ID        string
	AmountJpy int64
	Status    string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.ExecContext(ctx, createOrder,
		arg.ID,
		arg.AmountJpy,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, amount_jpy, status, created_at, updated_at
FROM orders
WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.AmountJpy,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
SET amount_jpy = $2, status = $3, updated_at = $4
WHERE id = $1
`

type UpdateOrderParams struct {
	ID        string
	AmountJpy int64
	Status    string
	UpdatedAt time.Time
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateOrder,
		arg.ID,
		arg.AmountJpy,
		arg.Status,
		arg.UpdatedAt,
	)
	return err
}
